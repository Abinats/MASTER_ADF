{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CUSTOMERDATA_TGT_CSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_CUSTOMERDATA_TGT",
						"type": "DatasetReference"
					},
					"name": "srclookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CUSTOMERDATA_TGT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_CUSTOMERDATA_TGT",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CID as integer,",
				"          Name as string,",
				"          MailID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          CID as integer,",
				"          Name as string,",
				"          MailID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srclookup",
				"srclookup select(mapColumn(",
				"          CID_lkp = CID,",
				"          Name_lkp = Name,",
				"          MailID_lkp = MailID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, srclookup lookup(source1@CID == srclookup@CID",
				"     && source1@MailID == srclookup@MailID",
				"     && source1@Name == srclookup@Name,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(mod(source1@CID,2)!=0) ~> filter1",
				"filter1 split(isNull(srclookup@CID),",
				"     !isNull(srclookup@CID),",
				"     disjoint: false) ~> split1@(insert, update)",
				"split1@insert alterRow(insertIf(isInsert())) ~> alterRow1",
				"split1@update alterRow(updateIf(isUpdate())) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CID as integer,",
				"          Name as string,",
				"          MailID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CID as integer,",
				"          Name as string,",
				"          MailID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['CID','Name','MailID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}